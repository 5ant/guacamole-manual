<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="guacamole-ext" xmlns="http://docbook.org/ns/docbook"
    version="5.0" xml:lang="en" xmlns:xl="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>guacamole-ext</title>
    <indexterm>
        <primary>API</primary>
        <secondary>Java</secondary>
    </indexterm>
    <indexterm>
        <primary>guacamole-ext</primary>
    </indexterm>
    <para>While not strictly part of the Java API provided by the Guacamole
        project, guacamole-ext is a subset of the API used by the Guacamole web
        application, exposed within a separate project such that extensions,
        specifically authentication providers, can be written to tweak Guacamole
        to fit well in existing deployments.</para>
    <section>
        <title>Common configuration</title>
        <para/>
        <section>
            <title><classname>GuacamoleProperties</classname></title>
            <para/>
        </section>
        <section>
            <title><classname>GuacamoleHome</classname></title>
            <para/>
        </section>
    </section>
    <section xml:id="auth-providers">
        <title>Authentication providers</title>
        <para>The main use of guacamole-ext is to provide custom authentication
            for Guacamole through the implementation of authentication
            providers. An authentication provider is any class which implements
            the <classname>AuthenticationProvider</classname> interface,
            implementing the only function defined by that interface:
                <methodname>getUserContext()</methodname>. This function is
            required to return a "context" which provides access to only those
            users and configurations accessible with the given credentials, and
            enforces its own security model.</para>
        <para>The credentials given are abstract and while Guacamole the web
            application implements a username/password driven login screen, you
            are not required to user usernames and passwords; the
                <classname>Credentials</classname> class given to the
            authentication provider provides access to all HTTP parameters in
            general, as well as cookies and SSL information.</para>
        <para>The Guacamole web application includes a basic authentication
            provider implementation which parses an XML file to determine which
            users exist, their corresponding passwords, and what configurations
            those users have access to. This is the part of Guacamole that reads
            the <filename>user-mapping.xml</filename> file. If you use a custom
            authentication provider for your authentication, this file will
            probably not be required.</para>
        <para>The community has implemented authentication providers which
            access databases, use LDAP, or even perform no authentication at
            all, redirecting all users to a single configuration specified in
                <filename>guacamole.properties</filename>.</para>
        <para>A minimal authentication provider is implemented in the tutorials
            later, and the upstream authentication provider implemented within
            Guacamole, as well as the authentication providers implemented by
            the community, are good examples for how authentication can be
            extended without having to implement a whole new web
            application.</para>
        <section>
            <title><classname>SimpleAuthenticationProvider</classname></title>
            <para>The <classname>SimpleAuthenticationProvider</classname> class
                provides a much simpler means of implementing authentication
                when you do not require the ability to add and remove users and
                connections. It is an abstract class and requires only one
                function implementation:
                    <methodname>getAuthorizedConfigurations()</methodname>.</para>
            <para>This function is required to return a
                    <classname>Map</classname> of unique IDs to configurations,
                where these configurations are all configurations accessible
                with the provided credentials. As before, the credentials given
                are abstract. You are not required to use usernames and
                passwords.</para>
            <para>The configurations referred to by the function name are
                instances of <classname>GuacamoleConfiguration</classname> (part
                of guacamole-common), which is just a wrapper around a protocol
                name and set of parameter name/value pairs. The name of the
                protocol to use and a set of parameters is the minimum
                information required for other parts of the Guacamole API to
                complete the handshake required by the Guacamole
                protocol.</para>
            <para>When a class that extends
                    <classname>SimpleAuthenticationProvider</classname> is asked
                for more advanced operations by the web application,
                    <classname>SimpleAuthenticationProvider</classname> simply
                returns that there is no permission to do so. This effectively
                disables all administrative functionality within the web
                interface.</para>
            <para>If you choose to go the simple route, most of the rest of this
                chapter is irrelevant. Permissions, security model, and various
                classes will be discussed that are all handled for you
                automatically by
                    <classname>SimpleAuthenticationProvider</classname>.</para>
        </section>
        <section>
            <title>The <classname>UserContext</classname></title>
            <para>The <classname>UserContext</classname> is the root of all
                operations. It is used to list, create, modify, or delete users
                and connections, as well as to query available
                permissions.</para>
            <para>The Guacamole web application uses permissions queries against
                the <classname>UserContext</classname> to determine what
                operations to present, but <emphasis>beware that it is up to the
                        <classname>UserContext</classname> to actually enforce
                    these restrictions</emphasis>. The Guacamole web application
                will not enforce restrictions on behalf of the
                    <classname>UserContext</classname>.</para>
            <para>The <classname>UserContext</classname> is the sole means of
                entry and the sole means of modification available to a
                logged-in user. If the <classname>UserContext</classname>
                refuses to perform an operation (by throwing an exception), the
                user cannot perform the operation at all.</para>
        </section>
        <section>
            <title><classname>Directory</classname> classes</title>
            <para/>
        </section>
        <section>
            <title>Permissions</title>
            <para/>
            <section>
                <title>System permissions</title>
                <para/>
            </section>
            <section>
                <title>User permissions</title>
                <para/>
            </section>
            <section>
                <title>Connection permissions</title>
                <para/>
            </section>
        </section>
        <section>
            <title>Connections and history</title>
            <para/>
        </section>
    </section>
    <section xml:id="event-listeners">
        <title>Event listeners</title>
        <para>Although not used internally by the web application, the web
            application provides an event system which can be hooked into with
            listener objects, such that a class within the classpath of
            Guacamole can receive events when something noteworthy happens in
            the application layer, and take some sort of action.</para>
        <para>Currently, the web application provides events for when the tunnel
            is opened or closed, and when an authentication attempt succeeds or
            fails. In most cases, the class listening for these events can also
            cancel whatever action just occurred.</para>
        <section xml:id="tunnel-connect-listener">
            <title><classname>TunnelConnectListener</classname></title>
            <para>When a tunnel is connected to by the JavaScript client,
                Guacamole informs all installed instances of
                    <classname>TunnelConnectListener</classname> by calling
                their <methodname>tunnelConnected()</methodname> function with a
                new <classname>TunnelConnectEvent</classname>, which contains
                the tunnel that was just connected, as well as any associated
                credentials. If <methodname>tunnelConnected()</methodname>
                returns <constant>false</constant>, the connect attempt will be
                overridden and denied.</para>
        </section>
        <section xml:id="tunnel-close-listener">
            <title><classname>TunnelCloseListener</classname></title>
            <para>When a tunnel is connected to by the JavaScript client,
                Guacamole informs all installed instances of
                    <classname>TunnelCloseListener</classname> by calling their
                    <methodname>tunnelClosed()</methodname> function with a new
                    <classname>TunnelCloseEvent</classname>, which contains the
                tunnel that is about to be closed, as well as any associated
                credentials. If <methodname>tunnelClosed()</methodname> returns
                    <constant>false</constant>, the attempt close the tunnel
                will be overridden and denied, and the tunnel will remain
                open.</para>
        </section>
        <section xml:id="authentication-success-listener">
            <title><classname>AuthenticationSuccessListener</classname></title>
            <para>If a user successfully authenticates with the web application,
                Guacamole informs all installed instances of
                    <classname>AuthenticationSuccessListener</classname> by
                calling their <methodname>authenticationSucceeded()</methodname>
                function with a new
                    <classname>AuthenticationSuccessEvent</classname> which
                contains the credentials used. The implementation of this
                function has the opportunity to cancel the authentication
                attempt, effectively denying access despite being otherwise
                valid, by returning <constant>false</constant>.</para>
        </section>
        <section xml:id="authentication-failure-listener">
            <title><classname>AuthenticationFailureListener</classname></title>
            <para>If a user fails to authenticate with the web application,
                Guacamole informs all installed instances of
                    <classname>AuthenticationFailureListener</classname> by
                calling their <methodname>authenticationFailed()</methodname>
                function with a new
                    <classname>AuthenticationFailureEvent</classname> which
                contains the credentials used. Unlike other listeners, this
                event cannot be canceled by returning
                <constant>false</constant>. All failed authentication attempts
                "succeed" in failing, and an implementation of
                    <classname>AuthenticationFailureListener</classname> cannot
                force an authentication attempt to succeed by denying that
                failure.</para>
        </section>
    </section>
</chapter>
