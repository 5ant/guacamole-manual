<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="installing-guacamole" xmlns="http://docbook.org/ns/docbook"
    version="5.0" xml:lang="en" xmlns:xl="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Installing Guacamole</title>
    <indexterm>
        <primary>Guacamole</primary>
        <secondary>installing</secondary>
    </indexterm>
    <indexterm>
        <primary>installing</primary>
    </indexterm>
    <section xml:id="binary-packages">
        <title>Packages from your distribution</title>
        <indexterm>
            <primary>packages</primary>
        </indexterm>
        <para>If your distribution provides Guacamole packages for you, this is
            the preferred method of installing Guacamole. Install your
            distribution's Guacamole package, and then follow the common
            instructions here for configuring Guacamole once it is
            installed.</para>
        <para>If your distribution does not provide Guacamole packages, or the packages provided are
            too old, you can build Guacamole from source.</para>
        <important>
            <para>Be aware that Guacamole is a remote desktop gateway, and
                cannot access your desktop's display without a remote desktop
                server of some kind to connect to. Guacamole does not contain
                its own VNC or RDP server, and these installation procedures
                will not walk you through the installation of a VNC or RDP
                server.</para>
            <para>Your distribution of choice will provide documentation for
                setting up VNC, as will the documentation provided by those that
                created the VNC server you wish to use. If you are going to use
                RDP to connect to Windows computers, Microsoft (and many others
                on the internet) provides documentation describing how to set up
                remote desktop.</para>
        </important>
        <informalexample>
            <screen><prompt>#</prompt> <userinput>apt-get install guacamole</userinput>
<prompt>#</prompt> </screen>
        </informalexample>
        <informalexample>
            <screen><prompt>#</prompt> <userinput>yum install guacamole</userinput>
<prompt>#</prompt> </screen>
        </informalexample>
        <section>
            <title>Deploying Guacamole</title>
            <indexterm>
                <primary>deploying</primary>
            </indexterm>
            <para>After the Guacamole packages are installed, the web
                application must still be deployed to your servlet container.
                The Debian bundle contains a package called
                    <package>guacamole-tomcat</package> which will do this for
                you, but if you are using Fedora or you don't wish to install
                this package, you must deploy Guacamole manually.</para>
            <para>Deploying Guacamole is a one-time process, and needs to be
                done only when Guacamole is initially installed. Future upgrades
                to Guacamole will be automatically deployed if this process is
                followed.</para>
            <para>To deploy Guacamole, you must make two symbolic links: one
                effectively copying the web application (now located at
                    <filename>/var/lib/guacamole/guacamole.war</filename>) into
                the directory Tomcat monitors for web application deployment,
                and the other effectively copying the configuration file,
                    <filename>guacamole.properties</filename>, into the Tomcat's
                classpath, such that Guacamole can find it once it runs. This
                must be done as root:</para>
            <informalexample>
                <screen><prompt>#</prompt> <userinput>ln -s /var/lib/guacamole/guacamole.war /var/lib/tomcat6/webapps</userinput>
<prompt>#</prompt> <userinput>ln -s /etc/guacamole/guacamole.properties /usr/share/tomcat6/lib</userinput>
<prompt>#</prompt></screen>
            </informalexample>
            <para>Thankfully, Debian and Fedora both agree on the location for
                web applications and Tomcat's classpath. If you are using a
                different servlet container or you installed Tomcat manually
                (without using your distribution's packages), or you are not
                using Debian or Fedora, these locations may be different.</para>
            <para>Once Guacamole has been deployed, Tomcat must be restarted (as
                    <filename>guacamole.properties</filename> will only be read
                on servlet container start) and the guacd daemon must be started
                if it isn't running already:</para>
            <informalexample>
                <screen><prompt>#</prompt> <userinput>service tomcat6 restart</userinput>
<computeroutput>Redirecting to /bin/systemctl tomcat6  restart.service</computeroutput>
<prompt>#</prompt> <userinput>service guacd start</userinput>
<computeroutput>Starting guacd: SUCCESS
guacd[6229]: INFO:  Guacamole proxy daemon (guacd) version 0.7.0
guacd[6229]: INFO:  Unable to bind socket to host ::1, port 4822: Address family not supported by
protocol
guacd[6229]: INFO:  Successfully bound socket to host 127.0.0.1, port 4822
guacd[6229]: INFO:  Exiting and passing control to PID 6230
guacd[6230]: INFO:  Exiting and passing control to PID 6231</computeroutput>
<prompt>#</prompt></screen>
            </informalexample>
            <para>After restarting Tomcat and starting guacd, Guacamole is
                successfully installed and running.</para>
            <para>If you want Guacamole to start on boot, you will need to
                configure the tomcat6 and guacd services to run automatically.
                On Debian, this will be the default. On Fedora, you can do this
                using <command>chkconfig</command>:</para>
            <informalexample>
                <screen><prompt>#</prompt> <userinput>chkconfig tomcat6 on</userinput>
<computeroutput>Note: forwarding request to 'systemctl enable tomcat6.service'
ln -s '/usr/lib/systemd/system/tomcat6.service'
    '/etc/systemd/system/multi-user.target.wants/tomcat6.service'</computeroutput>
<prompt>#</prompt> <userinput>chkconfig guacd on</userinput>
<prompt>#</prompt></screen>
            </informalexample>
        </section>
    </section>
    <section xml:id="building-guacamole-from-source">
        <title>Building Guacamole from source</title>
        <indexterm>
            <primary>compiling</primary>
            <secondary>Guacamole</secondary>
        </indexterm>
        <indexterm>
            <primary>Guacamole</primary>
            <secondary>compiling</secondary>
        </indexterm>
        <para>Building the components of Guacamole from source is not difficult,
            providing you have the necessary tools installed already. The source
            for the entirety of Guacamole is available from the Guacamole
            project web site in convenient source archives, each named after the
            component they contain. Each archive also contains a file named
                <filename>README</filename> which lists detailed instructions
            for building and installing. </para>
        <para>To compile the C components, you will need a C compiler (such as
            gcc) and the libraries that each component depends on. Note that
            many Linux distribution separates library packages into binary and
            "development" packages; you will need to install the development
            packages. These will usually end in a "-dev" or "-devel" suffix. </para>
        <section xml:id="compiling-guacamole-server">
            <title><package>guacamole-server</package></title>
            <indexterm>
                <primary>compiling</primary>
                <secondary><package>libguac</package></secondary>
            </indexterm>
            <indexterm>
                <primary><package>libguac</package></primary>
                <secondary>compiling</secondary>
            </indexterm>
            <indexterm>
                <primary>compiling</primary>
                <secondary>guacd</secondary>
            </indexterm>
            <indexterm>
                <primary>guacd</primary>
                <secondary>compiling</secondary>
            </indexterm>
            <indexterm>
                <primary>compiling</primary>
                <secondary>VNC support</secondary>
            </indexterm>
            <indexterm>
                <primary>VNC support</primary>
                <secondary>compiling</secondary>
            </indexterm>
            <indexterm>
                <primary>compiling</primary>
                <secondary>RDP support</secondary>
            </indexterm>
            <indexterm>
                <primary>RDP support</primary>
                <secondary>compiling</secondary>
            </indexterm>
            <para>The core Guacamole C library, <package>libguac</package>, is a common dependency
                of all native components of Guacamole. It depends on Cairo, a graphics library, and
                libpng, the official PNG library. Once you have installed these dependencies,
                building <package>libguac</package> is easy:</para>
            <para>Once <package>libguac</package> is compiled and installed,
                    <package>guacd</package> and protocol support plugins can be compiled and
                installed as well. None of these components can be compiled or installed until after
                    <package>libguac</package> as they all depend on it heavily.</para>
            <para>guacd is the proxy daemon that runs on your Guacamole server, accepting
                connections from the Guacamole web application on behalf of remote users. It
                effectively translates between common remote desktop protocols like VNC or RDP by
                dynamically loading protocol support plugins. Building guacd creates an executable
                called <filename>guacd</filename> which can be run manually or, if you wish,
                automatically when your computer starts up.</para>
            <informalexample>
                <screen><prompt>$</prompt> <userinput>tar -xzf guacamole-server-0.8.2.tar.gz</userinput>
<prompt>$</prompt> <userinput>cd guacamole-server-0.8.2/</userinput>
<prompt>$</prompt></screen>
            </informalexample>
            <informalexample>
                <screen><prompt>$</prompt> <userinput>git clone <uri>git://github.com/glyptodon/guacamole-server.git</uri> -b unstable</userinput>
<computeroutput>Cloning into 'guacamole-server'...
remote: Counting objects: 6769, done.
remote: Compressing objects: 100% (2244/2244), done.
remote: Total 6769 (delta 3058), reused 6718 (delta 3008)
Receiving objects: 100% (6769/6769), 2.32 MiB | 777 KiB/s, done.
Resolving deltas: 100% (3058/3058), done.</computeroutput>
<prompt>$</prompt></screen>
            </informalexample>
            <informalexample>
                <screen><prompt>$</prompt> <userinput>./configure --with-init-dir=/etc/init.d</userinput>
<computeroutput>checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
...

------------------------------------------------
guacamole-server version 0.8.0
------------------------------------------------

   Library status:

     freerdp ............. yes
     pango ............... yes
     libssh .............. yes
     libVNCServer ........ yes
     libvorbisenc ........ yes

   Protocol support:

      RDP ....... yes
      SSH ....... yes
      VNC ....... yes

Type "make" to compile guacamole-server.
</computeroutput>
<prompt>$</prompt></screen>
            </informalexample>
            <informalexample>
                <screen><prompt>$</prompt> <userinput>make</userinput>
<computeroutput>Making all in src/libguac
make[1]: Entering directory `/home/zhz/guacamole/guacamole-server/src/libguac'
...
make[1]: Leaving directory `/home/zhz/guacamole/guacamole-server/src/protocols/vnc'
make[1]: Entering directory `/home/zhz/guacamole/guacamole-server'
make[1]: Nothing to be done for `all-am'.
make[1]: Leaving directory `/home/zhz/guacamole/guacamole-server'</computeroutput>
<prompt>$</prompt></screen>
            </informalexample>
            <informalexample>
                <screen><prompt>#</prompt> <userinput>make install</userinput>
<computeroutput>Making install in src/libguac
make[1]: Entering directory `/home/zhz/guacamole/guacamole-server/src/libguac'
make[2]: Entering directory `/home/zhz/guacamole/guacamole-server/src/libguac'
...
----------------------------------------------------------------------
Libraries have been installed in:
   /usr/local/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
make[2]: Nothing to be done for `install-data-am'.
make[2]: Leaving directory `/home/zhz/guacamole/guacamole-server/src/protocols/vnc'
make[1]: Leaving directory `/home/zhz/guacamole/guacamole-server/src/protocols/vnc'
make[1]: Entering directory `/home/zhz/guacamole/guacamole-server'
make[2]: Entering directory `/home/zhz/guacamole/guacamole-server'
make[2]: Nothing to be done for `install-exec-am'.
make[2]: Nothing to be done for `install-data-am'.
make[2]: Leaving directory `/home/zhz/guacamole/guacamole-server'
make[1]: Leaving directory `/home/zhz/guacamole/guacamole-server'</computeroutput>
<prompt>#</prompt> <userinput>ldconfig</userinput>
<prompt>#</prompt>   </screen>
            </informalexample>
            <para>
                <indexterm>
                    <primary>guacd</primary>
                    <secondary>startup script</secondary>
                </indexterm> If you do not wish guacd to start automatically at boot, leave off the
                    <option>--with-init-dir=/etc/init.d</option> option. If the directory containing
                your distribution's startup scripts differs from the common
                    <filename>/etc/init.d</filename>, replace <filename>/etc/init.d</filename> with
                the proper directory here. You may need to consult your distribution's
                documentation, or do a little digging in <filename>/etc</filename>, to determine the
                proper location. </para>
            <para>Even after installing guacd and its startup script, you will likely still have to
                activate the service for it to start automatically. Doing this varies by
                distribution, but each distribution will have documentation describing how to do so. </para>
        </section>
        <section xml:id="compiling-guacamole-client">
            <title><package>guacamole-client</package></title>
            <indexterm>
                <primary>compiling</primary>
                <secondary><filename>guacamole.war</filename></secondary>
            </indexterm>
            <indexterm>
                <primary><filename>guacamole.war</filename></primary>
                <secondary>compiling</secondary>
            </indexterm>
            <para>To compile the Java and Maven components of Guacamole
                    (<package>guacamole</package>, <package>guacamole-common</package>,
                    <package>guacamole-ext</package>, and <package>guacamole-common-js</package>),
                all you need is Apache Maven and a copy of the Java JDK, both of which most Linux
                distributions provide packages of. Because Java is cross-platform, this is generally
                not necessary unless you want to modify the Guacamole source. Even if you wish to
                modify the Guacamole web application, you still generally do not need to compile the
                other Java and Maven components, as Maven will automatically download compiled
                versions of those components from the official Maven repository of the Guacamole
                project: <uri>http://guac-dev.org/repo/</uri>.</para>
            <informalexample>
                <screen><prompt>$</prompt> <userinput>tar -xzf guacamole-client-0.8.2.tar.gz</userinput>
<prompt>$</prompt> <userinput>cd guacamole-client-0.8.2/</userinput>
<prompt>$</prompt></screen>
            </informalexample>
            <informalexample>
                <screen><prompt>$</prompt> <userinput>git clone <uri>git://github.com/glyptodon/guacamole-client.git</uri> -b unstable</userinput>
<computeroutput>Cloning into 'guacamole-client'...
remote: Counting objects: 12788, done.
remote: Compressing objects: 100% (4183/4183), done.
remote: Total 12788 (delta 3942), reused 12667 (delta 3822)
Receiving objects: 100% (12788/12788), 3.23 MiB | 799 KiB/s, done.
Resolving deltas: 100% (3942/3942), done.</computeroutput>
<prompt>$</prompt></screen>
            </informalexample>
            <informalexample>
                <screen><prompt>$</prompt> <userinput>mvn package</userinput>
<computeroutput>[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   guacamole-common
[INFO]   guacamole-ext
[INFO]   guacamole-common-js
[INFO]   guacamole
[INFO]   guacamole-client
...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ------------------------------------------------------------------------
[INFO] guacamole-common ...................................... SUCCESS [4.467s]
[INFO] guacamole-ext ......................................... SUCCESS [1.479s]
[INFO] guacamole-common-js ................................... SUCCESS [3.680s]
[INFO] guacamole ............................................. SUCCESS [3.729s]
[INFO] guacamole-client ...................................... SUCCESS [0.008s]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13 seconds
[INFO] Finished at: Mon Jul 08 00:44:42 PDT 2013
[INFO] Final Memory: 43M/354M
[INFO] ------------------------------------------------------------------------</computeroutput>
<prompt>$</prompt></screen>
            </informalexample>
            <para>Once the Guacamole web application is built, there will be a .war file in the
                    <filename>target/</filename> subdirectory of the current directory (the
                directory you were in when you ran <application>mvn</application>). This .war file
                contains the entirety of the Guacamole web application, including all dependencies.
                Installing Guacamole means copying this .war file into the directory required by
                your servlet container.</para>
            <example>
                <title>Installing Guacamole after building from source</title>
                <screen><prompt>#</prompt> <userinput>cp guacamole/target/guacamole-0.8.2.war /var/lib/tomcat6/webapps/guacamole.war</userinput>
<prompt>#</prompt></screen>
            </example>
            <para>The Guacamole web application also depends on a configuration file,
                    <filename>guacamole.properties</filename>, to tell it the type of authentication
                to use and how to connect to guacd. A functional example
                    <filename>guacamole.properties</filename> is contained in the
                    <filename>doc/</filename> subdirectory; you can simply copy this somewhere (like
                    <filename>/etc/guacamole</filename>) and then create a symbolic link to it
                somewhere in your servlet container's classpath. Again, the precise location of the
                classpath will vary by distribution and servlet container.</para>
            <example>
                <title>Installing <filename>guacamole.properties</filename></title>
                <screen><prompt>#</prompt> <userinput>mkdir /etc/guacamole</userinput>
<prompt>#</prompt> <userinput>cp doc/guacamole.properties /etc/guacamole/guacamole.properties</userinput>
<prompt>#</prompt> <userinput>ln -s /etc/guacamole/guacamole.properties /usr/share/tomcat6/lib/</userinput>
<prompt>#</prompt>           </screen>
            </example>
            <para>You will need to edit <filename>guacamole.properties</filename> to be sure that
                all the settings are valid for your installation.</para>
            <para>If you are using the default authentication method, you will also need to install
                the <filename>user-mapping.xml</filename> file. This file describes the users that
                should be allowed to log into Guacamole, as well as their passwords, and all
                corresponding remote desktop connections they should have access to.</para>
            <para>An example <filename>user-mapping.xml</filename> file is provided in the
                    <filename>doc/</filename> subdirectory. You can simply copy this file to a
                reasonable location (like <filename>/etc/guacamole/user-mapping.xml</filename>) and
                then edit <filename>guacamole.properties</filename> to specify the correct location
                of this file.</para>
            <para>You will need to edit <filename>user-mapping.xml</filename> to add and remove
                users, as well as to remove the "default" users included as examples.</para>
        </section>
    </section>
</chapter>
