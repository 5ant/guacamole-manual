<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="guacamole-protocol" xmlns="http://docbook.org/ns/docbook"
    version="5.0" xml:lang="en" xmlns:xl="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Guacamole protocol</title>
    <indexterm>
        <primary>Guacamole</primary>
        <secondary>protocol</secondary>
    </indexterm>
    <para>This chapter is an overview of the Guacamole protocol, describing its
        design and general use. While a few instructions and their syntax will
        be described here, this is not an exhaustive list of all available
        instructions. The intent is only to list the general types and usage. If
        you are looking for the syntax or purpose of a specific instruction,
        consult the protocol reference included with the appendices.</para>
    <section>
        <title>Design</title>
        <para>The Guacamole protocol is a streamed list of text particles called
            "elements" which have a corresponding length prefix and terminating
            character. The terminating character determines whether the element
            is part of an instruction that continues in the following element,
            or whether the element is the final element of the current
            instruction.</para>
        <para>Each instruction in the Guacamole protocol is atomic and consists
            of an opcode (the first element in the instruction) followed by any
            number of parameters, where the number of required parameters is
            dictated by the opcode used.</para>
        <para>Each instruction is handled by the client, server, or both, and
            has a corresponding helper function in libguac for sending that
            instruction.</para>
    </section>
    <section>
        <title>Handshake phase</title>
        <para>The handshake phase is the phase of the protocol entered
            immediately upon connection. It begins with a "select" instruction
            sent by the client which tells the server which protocol will be
            loaded:</para>
        <programlisting>6.select,3.vnc;</programlisting>
        <para>After receiving the "select" instruction, the server will load the
            associated client support and respond with a list of accepted
            parameter names using an "args" instruction:</para>
        <programlisting>4.args,8.hostname,4.port,8.password,13.swap-red-blue,9.read-only;</programlisting>
        <para>After receiving the list of arguments, the client is required to
            respond with the list of supported audio and video mimetypes, the
            optimal display size, and the values for all arguments available,
            even if blank. If any of these requirements are left out, the
            connection will close:</para>
        <programlisting>4.size,4.1024,3.768;
5.audio,9.audio/ogg;
5.video;
7.connect,9.localhost,4.5900,0.,0.,0.;</programlisting>
        <para>For clarity, we've put each instruction on its own line, but in
            the real protocol, no newlines exist between instructions. In fact,
            if there is anything after an instruction other than the start of a
            new instruction, the connection is closed.</para>
        <para>Here, the client is specifying that the optimal display size is
            1024x768 and it supports Ogg Vorbis audio, but no video. It wants to
            connect to localhost at port 5900, and is leaving the three other
            parameters blank.</para>
        <para>Once these instructions have been sent by the client, the actual
            interactive phase begins, and drawing and event instructions pass
            back and forth until the connection is closed.</para>
    </section>
    <section>
        <title>Nesting and interleaving</title>
        <para>The Guacamole protocol can be nested within itself, such that long
            instructions or independent streams of multiple instructions need
            not block each other; they can be multiplexed into the same stream.
            Nesting is accomplished with the "nest" instruction.</para>
        <para>A nest instruction has only two parameters: an arbitrary integer
            index denoting what stream the data is associated with, and the
            instruction data itself. The integer index is important as it
            defines how the instruction will be reassembled. The data from nest
            instructions with the same stream index is reassembled by the client
            in the order received, and instructions within that data are
            executed immediately once completed.</para>
        <para>This is particularly important when transferring large amounts of
            data, such as a video stream or a file, since doing so would
            normally cause all other instructions to wait. As instructions in
            the Guacamole protocol are atomic and sent in a single stream, if
            you wish to transfer (for example) 100 megabytes of data, future
            instructions would have to wait for that single, gigantic 100
            megabyte instruction to finish being written. If this instruction
            were sent via nest instructions instead, it could be broken up into
            smaller chunks (say, around 4 or 8 kilobytes) which would not
            disturb the responsiveness of the connection, and the delay before
            other instructions can be sent becomes negligible.</para>
    </section>
    <section>
        <title>Drawing</title>
        <section>
            <title>Image data</title>
            <para>Raw image data is sent within PNG chunks using the "png"
                instruction.</para>
        </section>
        <section>
            <title>Copying image data between layers</title>
            <para>Image data can be copied from one layer or buffer into another
                layer or buffer. This is often used for scrolling (where most of
                the result of the graphical update is identical to the previous
                state) or for caching parts of an image.</para>
        </section>
        <section>
            <title>Graphical primitives</title>
            <para>The Guacamole protocol provides basic graphics operations
                similar to those of Cairo or the HTML5 canvas. In many cases,
                these primitives are useful for remote drawing, and desirable in
                that they take up less bandwidth than sending corresponding PNG
                images. Beware that excessive use of primitives leads to an
                increase in client-side processing, which may reduce the
                performance of a connected client, especially if that client is
                on a lower-performance machine like a mobile phone or
                tablet.</para>
        </section>
        <section>
            <title>Buffers and layers</title>
            <para>All drawing operations in the Guacamole protocol affect a
                layer, and each layer has an integer index which identifies it.
                When this integer is negative, the layer is not visible, and can
                be used for storage or caching of image data. In this case, the
                layer is referred to within the code and within documentation as
                a "buffer".</para>
            <para>There is one main layer which is always present called the
                "default layer". This layer has an index of 0. Resizing this
                layer resizes the entire remote display.</para>
            <para>Non-buffer layers can be moved and nested within each other.
                In this way, layers provide a simple means of
                hardware-accelerated compositing. If you need a window to appear
                above others, or you have some object which will be moving or
                you need the data beneath it automatically preserved, a layer is
                a good way of accomplishing this.</para>
        </section>
    </section>
    <section>
        <title>Audio and video</title>
        <para>As of the 0.7.0 release, Guacamole supports transfer of both audio
            and video data. By the nature of the Guacamole protocol, you must
            know the size and duration of the audio or video data before it is
            sent. Because of this, audio and video data is usually sent in
            chunks, where variance in chunk size gives a trade-off between
            responsiveness and stability. Sending large audio or video chunks is
            one of the main uses of protocol nesting.</para>
    </section>
    <section>
        <title>Events</title>
        <para>When something changes on either side, client or server, such as a
            key being pressed, the mouse moving, or clipboard data changing, an
            instruction describing the event is sent.</para>
    </section>
    <section>
        <title>Disconnecting</title>
        <para>The server and client can end the connection at any time. There is
            no requirement for the server or the client to communicate that the
            connection needs to terminate. When the client or server wish to end
            the connection, and the reason is known, they can use the
            "disconnect" or "error" instructions.</para>
        <para>The disconnect instruction is sent by the client when it is
            disconnecting. This is largely out of politeness, and the server
            must be written knowing that the disconnect instruction may not
            always be sent in time (guacd is written this way).</para>
        <para>If the client does something wrong, or the server detects a
            problem with the client plugin, the server sends an error
            instruction, including a description of the problem in the
            parameters. This informs the client that the connection is being
            closed.</para>
    </section>
</chapter>
