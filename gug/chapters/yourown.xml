<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="writing-you-own-guacamole-app"
    xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Writing your own Guacamole application</title>
    <indexterm xmlns:xl="http://www.w3.org/1999/xlink">
        <primary>Guacamole</primary>
        <secondary>writing your own application</secondary>
    </indexterm>
    <para>As Guacamole is an API, one of the best ways to put Guacamole to use
        is by building your own Guacamole-driven web application, integrating
        HTML5 remote desktop into whatever you think needs it.</para>
    <para>The Guacamole project provides an example of doing this called
        "guacamole-example", but this example is already completed for you, and
        from a quick glance at this example, it may not be obvious just how easy
        it is to integrate remote access into a web application. This tutorial
        will walk you through the basic steps of building an HTML5 remote
        desktop application using the Guacamole API and Maven.</para>
    <section>
        <title>The basics</title>
        <para>Guacamole's architecture is made up of many components, but it's
            actually straightforward, especially from the perspective of the web
            application.</para>
        <para>Guacamole has a proxy daemon, guacd, which handles communication
            using remote desktop protocols, exposing those to whatever connects
            to it (in this case, the web application) using the Guacamole
            protocol. From where the web application is standing, it doesn't
            really matter that guacd dynamically loads protocol plugins or that
            it shares a common library allowing this; all that matters is that
            the web application just has to connect to port 4822 (where guacd
            listens by default) and use the Guacamole protocol. The architecture
            will take care of the rest.</para>
        <para>Thankfully, the Java side of the Guacamole API provides simple
            classes which already implement the Guacamole protocol with the
            intent of tunneling it between guacd and the JavaScript half of your
            web application. A typical web application leveraging these classes
            needs only the following:<orderedlist>
                <listitem>
                    <para>A class which extends
                            <classname>GuacamoleHTTPTunnelServlet</classname>,
                        providing the tunnel between the JavaScript client
                        (presumably using guacamole-common-js) and guacd.</para>
                    <para><classname>GuacamoleHTTPTunnelServlet</classname> is
                        an abstract class which is provided by the Guacamole API
                        and already implements a fully functional, HTTP-based
                        tunnel which the tunneling objects already part of
                        guacamole-common-js are written to connect to. This
                        class exists to make it easy for you to use Guacamole's
                        existing and robust HTTP tunnel implementation.</para>
                    <para>If you want to not use this class and instead use your
                        own tunneling mechanism, perhaps WebSocket, this is
                        fine; the JavaScript object mentioned above implements a
                        common interface which you can also implement, and the
                        Guacamole JavaScript client which is also part of
                        guacamole-common-js will happily use your implementation
                        as long as it provides that interface.</para>
                </listitem>
                <listitem>
                    <para>A web page which includes JavaScript files from
                        guacamole-common-js and uses the client and tunnel
                        objects to connect back to the web application.</para>
                    <para>The JavaScript API provided by the Guacamole project
                        includes a full implementation of the Guacamole protocol
                        as a client, implementations of HTTP and WebSocket-based
                        tunnels, and mouse/keyboard/touch input abstraction.
                        Again, as the Guacamole protocol and all parts of the
                        architecture are documented here, you don't absolutely
                        need to use these objects, but it will make your life
                        easier. Mouse and keyboard support in JavaScript is
                        finicky business, and the Guacamole client provided is
                        well-known to work with other components in the API,
                        being the official client of the project.</para>
                </listitem>
            </orderedlist></para>
        <para>That's really all there is to it.</para>
        <para>If you want authentication, the place to implement that would be
            in your extended version of
                <classname>GuacamoleHTTPTunnelServlet</classname>; this is what
            the Guacamole web application does. Besides authentication, there
            are many other things you could wrap around your remote desktop
            application, but ultimately the base of all this is simple: you have
            a tunnel which allows the JavaScript client to communicate with
            guacd, and you have the JavaScript client itself, with the hard part
            already provided within guacamole-common-js.</para>
    </section>
    <section>
        <title>Guacamole project skeleton</title>
        <para>This tutorial will use Maven, which is the same build system used
            by the upstream Guacamole project. As the Guacamole project has a
            Maven repository for both the Java and JavaScript APIs, writing a
            Guacamole-based application using Maven is much easier; Maven will
            download and use the Guacamole API automatically. You need a
                <filename>pom.xml</filename> which specifies the upstream
            repository and explicitly declares guacamole-common and
            guacamole-common-js as dependencies.</para>
        <example>
            <title>Barebones Guacamole-based project
                    <filename>pom.xml</filename></title>
            <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd">

    &lt;modelVersion>4.0.0&lt;/modelVersion>
    &lt;groupId>net.sourceforge.guacamole&lt;/groupId>
    &lt;artifactId>guacamole-tutorial&lt;/artifactId>
    &lt;packaging>war&lt;/packaging>
    &lt;version>0.7.0&lt;/version>
    &lt;name>guacamole-tutorial&lt;/name>
    &lt;url>http://guac-dev.org/&lt;/url>

    &lt;properties>
        &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding>
    &lt;/properties>

    &lt;build>
        &lt;plugins>

            &lt;!-- Compile using Java 1.6 -->
            &lt;plugin>
                &lt;groupId>org.apache.maven.plugins&lt;/groupId>
                &lt;artifactId>maven-compiler-plugin&lt;/artifactId>
                &lt;configuration>
                    &lt;source>1.6&lt;/source>
                    &lt;target>1.6&lt;/target>
                &lt;/configuration>
            &lt;/plugin>

            &lt;!-- Overlay guacamole-common-js (zip) -->
            &lt;plugin>
                &lt;groupId>org.apache.maven.plugins&lt;/groupId>
                &lt;artifactId>maven-war-plugin&lt;/artifactId>
                &lt;configuration>
                    &lt;overlays>
                        &lt;overlay>
                            &lt;groupId>net.sourceforge.guacamole&lt;/groupId>
                            &lt;artifactId>guacamole-common-js&lt;/artifactId>
                            &lt;type>zip&lt;/type>
                        &lt;/overlay>
                    &lt;/overlays>
                &lt;/configuration>
            &lt;/plugin>

        &lt;/plugins>

    &lt;/build>

    &lt;dependencies>

        &lt;!-- Servlet API -->
        &lt;dependency>
            &lt;groupId>javax.servlet&lt;/groupId>
            &lt;artifactId>servlet-api&lt;/artifactId>
            &lt;version>2.5&lt;/version>
            &lt;scope>provided&lt;/scope>
        &lt;/dependency>

        &lt;!-- Main Guacamole library -->
        &lt;dependency>
            &lt;groupId>net.sourceforge.guacamole&lt;/groupId>
            &lt;artifactId>guacamole-common&lt;/artifactId>
            &lt;version>0.7.0&lt;/version>
            &lt;scope>compile&lt;/scope>
        &lt;/dependency>

        &lt;!-- Guacamole JavaScript library -->
        &lt;dependency>
            &lt;groupId>net.sourceforge.guacamole&lt;/groupId>
            &lt;artifactId>guacamole-common-js&lt;/artifactId>
            &lt;version>0.7.0&lt;/version>
            &lt;type>zip&lt;/type>
            &lt;scope>runtime&lt;/scope>
        &lt;/dependency>

    &lt;/dependencies>

    &lt;repositories>

        &lt;!-- Main Guacamole repository -->
        &lt;repository>
            &lt;id>guac-dev&lt;/id>
            &lt;url>http://guac-dev.org/repo&lt;/url>
        &lt;/repository>

    &lt;/repositories>

&lt;/project></programlisting>
        </example>
    </section>
    <section>
        <title>The simplest tunnel possible</title>
        <para>As with the other tutorials in this book, we will keep this simple
            for the sake of demonstrating the principles behind a
            Guacamole-based web application, and to give developers a good idea
            of where to start looking when it's time to consult the API
            documentation.</para>
        <para>It is the duty of the class extending
                <classname>GuacamoleHTTPTunnelServlet</classname> to implement a
            function called <methodname>doConnect()</methodname>. This is the
            only function required to be implemented, and in general it is the
            only function you should implement; the other functions involved are
            already optimized for tunneling the Guacamole protocol.</para>
        <para>The <methodname>doConnect()</methodname> function returns a
                <classname>GuacamoleTunnel</classname>, which provides a
            persistent communication channel for
                <classname>GuacamoleHTTPTunnelServlet</classname> to use when
            talking with guacd and initiating a connection with some arbitrary
            remote desktop using some arbitrary remote desktop protocol. In our
            simple tunnel, this configuration will be hard-coded, and no
            authentication will be attempted. Any user accessing this web
            application will be immediately given a functional remote desktop,
            no questions asked.</para>
        <example>
            <title>A simple tunnel, implementing only
                    <methodname>doConnnect()</methodname></title>
            <programlisting>
package net.sourceforge.guacamole.net.example;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import net.sourceforge.guacamole.GuacamoleException;
import net.sourceforge.guacamole.net.GuacamoleSocket;
import net.sourceforge.guacamole.net.GuacamoleTunnel;
import net.sourceforge.guacamole.net.InetGuacamoleSocket;
import net.sourceforge.guacamole.protocol.GuacamoleConfiguration;
import net.sourceforge.guacamole.protocol.ConfiguredGuacamoleSocket;
import net.sourceforge.guacamole.servlet.GuacamoleSession;
import net.sourceforge.guacamole.servlet.GuacamoleHTTPTunnelServlet;

public class TutorialGuacamoleTunnelServlet
    extends GuacamoleHTTPTunnelServlet {

    @Override
    protected GuacamoleTunnel doConnect(HttpServletRequest request)
        throws GuacamoleException {

        HttpSession httpSession = request.getSession(true);

        // Create our configuration
        GuacamoleConfiguration config = new GuacamoleConfiguration();
        config.setProtocol("vnc");
        config.setParameter("hostname", "localhost");
        config.setParameter("port", "5901");
        config.setParameter("password", "potato");

        // Connect to guacd - everything is hard-coded here.
        GuacamoleSocket socket = new ConfiguredGuacamoleSocket(
                new InetGuacamoleSocket("localhost", 4822),
                config
        );

        // Establish the tunnel using the connected socket
        GuacamoleTunnel tunnel = new GuacamoleTunnel(socket);

        // Attach tunnel to session
        GuacamoleSession session = new GuacamoleSession(httpSession);
        session.attachTunnel(tunnel);

        // Return pre-attached tunnel
        return tunnel;

    }

}</programlisting>
        </example>
    </section>
    <section>
        <title>The simplest client possible</title>
        <para>As the Guacamole JavaScript API already provides functional client
            and tunnel implementations, as well as mouse and keyboard input
            objects, the coding required for the "web" side of the web
            application is very minimal.</para>
        <para>We must create a <classname>Guacamole.HTTPTunnel</classname>,
            connect it to our previously-implemented tunnel servlet, and pass
            that tunnel to a new <classname>Guacamole.Client</classname>. Once
            that is done, and the <methodname>connect()</methodname> function of
            the client is called, communication will immediately ensue, and your
            remote desktop will be visible.</para>
        <para>As for mouse and keyboard input, we need only create a
                <classname>Guacamole.Mouse</classname> and
                <methodname>Guacamole.Keyboard</methodname>, and add event
            handlers to handle their corresponding input events, calling
            whichever function of the Guacamole client is appropriate to send
            the input event through the tunnel to guacd.</para>
        <example>
            <title>A full Guacamole-based client interface</title>
            <programlisting>&lt;!DOCTYPE HTML>

&lt;html>

    &lt;head>
        &lt;title>Guacamole Tutorial&lt;/title>
    &lt;/head>

    &lt;body>

        &lt;!-- Display -->
        &lt;div id="display">&lt;/div>

        &lt;!-- Input abstractions -->
        &lt;script type="text/javascript"
            src="guacamole-common-js/keyboard.js">&lt;/script>
        &lt;script type="text/javascript"
            src="guacamole-common-js/mouse.js">&lt;/script>

        &lt;!-- Client core scripts -->
        &lt;script type="text/javascript"
            src="guacamole-common-js/layer.js">&lt;/script>
        &lt;script type="text/javascript"
            src="guacamole-common-js/tunnel.js">&lt;/script>
        &lt;script type="text/javascript"
            src="guacamole-common-js/guacamole.js">&lt;/script>

        &lt;!-- Init -->
        &lt;script type="text/javascript"> /* &lt;![CDATA[ */

            // Get display div from document
            var display = document.getElementById("display");

            // Instantiate client, using an HTTP tunnel for communications.
            var guac = new Guacamole.Client(
                new Guacamole.HTTPTunnel("tunnel")
            );

            // Add client to display div
            display.appendChild(guac.getDisplay());
            
            // Error handler
            guac.onerror = function(error) {
                alert(error);
            };

            // Connect
            guac.connect();

            // Disconnect on close
            window.onunload = function() {
                guac.disconnect();
            }

            // Mouse
            var mouse = new Guacamole.Mouse(guac.getDisplay());

            mouse.onmousedown = 
            mouse.onmouseup   =
            mouse.onmousemove = function(mouseState) {
                guac.sendMouseState(mouseState);
            };

            // Keyboard
            var keyboard = new Guacamole.Keyboard(document);

            keyboard.onkeydown = function (keysym) {
                guac.sendKeyEvent(1, keysym);
            };

            keyboard.onkeyup = function (keysym) {
                guac.sendKeyEvent(0, keysym);
            };

        /* ]]&gt; */ &lt;/script>

    &lt;/body>

&lt;/html></programlisting>
        </example>
    </section>
    <section>
        <title>Where to go from here</title>
        <para>At this point, we now have a fully functional Guacamole-based web
            application. This web application inherits all the functionality
            present in the official Guacamole web application, including sound
            and video, without very much coding.</para>
        <para>Extending this application to provide authentication, multiple
            connections per user, or a spiffy interface which is compatible with
            mobile is not too much of a stretch. This is exactly how the
            Guacamole web application is written. Integrating Guacamole into an
            existing application would be similar.</para>
    </section>
</chapter>
